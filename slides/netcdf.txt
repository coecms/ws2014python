netCDF
======

A **net**\ work **C**\ ommon **D**\ ata **F**\ orm

Binary gridded data format with the following goals:

* Platform-independent

* Self-describing

* Readable across networks

* Good API for C, C++, Fortran, Java


Basic Structure
===============

Dimensions
   Sizes of each dimension axis (or "unlimited")

Variables
   Numerical data and its shape

Attributes
   Metadata describing contents


netCDF formats
==============

``NETCDF4``
   Standard, fully featured format

``NETCDF4_CLASSIC``
   netCDF4, but only netCDF3-compatible features

``NETCDF3_64BIT``
   Older netCDF3 format, large >2GiB files

``NETCDF3_CLASSIC``
   Standard 32-bit netCDF3, 2GiB size limit


NetCDF4 Python
===============

The ``netCDF4`` package is a Python interface to the NetCDF4 library, and
provides a fast and fully-featured API for reading and creating NetCDF files
with Python.


My first netCDF file
====================

Import the ``netCDF4`` package and create a new file:

.. code:: python

  import netCDF4

  latlon = netCDF4.Dataset('latlon.nc', 'w',
                           format='NETCDF4')
  latlon.close()


File mode options
=================

Syntax is similar (but not identical) to ``libc`` usage

- ``'r'``: Read-only (do not modify file)
- ``'w'``: Create a new file (and delete existing)
- ``'a'``: Append to existing file
- ``'r+'``: Read and write existing file


Creating data
=============

Two-stage approach:

1. Create dimensions and register variables

2. Write data to variables

Once you begin writing data to your variables, the manifest is saved and
you cannot add any more variables or dimensions.


Creating new dimensions
=======================

Create 5-degree resolution global latitude and longitude dimensions and an
unlimited time axis:

.. code:: python

   latlon = nc.Dataset('latlon.nc', 'w')

   lat_d = latlon.createDimension('latitude', 37)
   lon_d = latlon.createDimension('longitude', 73)
   time_d = latlon.createDimension('time', None)


Creating new variables
======================

Create variables which map to the dimensions:

.. code:: python

   lat_nc = latlon.createVariable('latitude',
                           'f8', ('latitude',))
   lon_nc = latlon.createVariable('longitude',
                           'f8', ('longitude',))
   time_nc = latlon.createVariable('time',
                           'f8', ('time',))


Write Variables
===============

To write variables to file, include the index reference (``[:]``):

.. code:: python

   lat_nc[:] = np.linspace(-90., 90., 37)
   lon_nc[:] = np.linspace(0., 360., 73)
   time_nc[:] = np.array([0.])


Attributes
==========

Add attributes using the dereference (``.``) operator:

.. code:: python

   latlon.description = 'A sample lat/lon grid'

   lat_nc.units = 'degrees north'
   lon_nc.units = 'degrees east'

   time_nc.units = 'days since 1900-01-01 00:00:00.0'
   time_nc.calendar = 'gregorian'


Exercise
========
TODO


Solution
========
TODO


Other Topics
============

Less common but useful features of netCDF:

* netCDF Groups

* Multi-file reads (non-``NETCDF4`` format)

* Data chunking

* Compression

* Variable-length (vlen) arrays

Now, back to NumPy...
